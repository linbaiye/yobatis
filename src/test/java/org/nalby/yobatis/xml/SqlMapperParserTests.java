package org.nalby.yobatis.xml;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.junit.Test;

import static org.junit.Assert.*;

import org.nalby.yobatis.exception.InvalidMapperException;

public class SqlMapperParserTests {
	
	@Test(expected = InvalidMapperException.class)
	public void idConfict() {
		String file1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" + 
				"<mapper namespace=\"dao.BlogMapper\">\n" + 
				"  <resultMap id=\"BaseResultMap\" type=\"hello.world.domain.Blog\">\n" + 
				"    <!--\n" + 
				"      WARNING - @mbg.generated\n" + 
				"      This element is automatically generated by MyBatis Generator, do not modify.\n" + 
				"      This element was generated on Mon Dec 04 21:25:54 PHT 2017.\n" + 
				"    -->\n" + 
				"    <id column=\"id\" jdbcType=\"BIGINT\" property=\"id\" />\n" + 
				"    <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n" + 
				"  </resultMap>\n" + 
				"</mapper>";
		String file2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" + 
				"<mapper namespace=\"dao.BlogMapper\">\n" + 
				"  <resultMap id=\"test\" type=\"hello.world.domain.Blog\">\n" + 
				"    <!--\n" + 
				"      WARNING - @mbg.generated\n" + 
				"      This element is automatically generated by MyBatis Generator, do not modify.\n" + 
				"      This element was generated on Mon Dec 04 21:25:54 PHT 2017.\n" + 
				"    -->\n" + 
				"    <id column=\"id\" jdbcType=\"BIGINT\" property=\"id\" />\n" + 
				"    <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n" + 
				"  </resultMap>\n" + 
				"  <sql id=\"BaseResultMap\" />\n" + 
				"</mapper>";
		SqlMapperParser parser1 = SqlMapperParser.fromString(file1);
		SqlMapperParser parser2 = SqlMapperParser.fromString(file2);
		parser1.merge(parser2);
	}
	
	public static class SqlMapper extends AbstractXmlParser {
		public SqlMapper(InputStream inputStream)
				throws DocumentException, IOException {
			super(inputStream, "mapper");
		}
		
		public void assertHasElement(String id) {
			List<Element> elements = document.getRootElement().elements();
			for (Element element : elements) {
				if (id.equals(element.attributeValue("id"))) {
					return;
				}
			}
			fail("failed to find id : " + id);
		}
	}
	
	@Test
	public void mergable() throws IOException, DocumentException {
		String file1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" + 
				"<mapper namespace=\"dao.BlogMapper\">\n" + 
				"  <resultMap id=\"BaseResultMap\" type=\"hello.world.domain.Blog\">\n" + 
				"    <!--\n" + 
				"      WARNING - @mbg.generated\n" + 
				"      This element is automatically generated by MyBatis Generator, do not modify.\n" + 
				"      This element was generated on Mon Dec 04 21:25:54 PHT 2017.\n" + 
				"    -->\n" + 
				"    <id column=\"id\" jdbcType=\"BIGINT\" property=\"id\" />\n" + 
				"    <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n" + 
				"  </resultMap>\n" + 
				"</mapper>";
		String file2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" + 
				"<mapper namespace=\"dao.BlogMapper\">\n" + 
				"  <!--sql id=\"test\"></sql-->\n" + 
				"  <sql id=\"test\"><!-- test comment --></sql>\n" + 
				"</mapper>";
		SqlMapperParser parser1 = SqlMapperParser.fromString(file1);
		SqlMapperParser parser2 = SqlMapperParser.fromString(file2);
		parser1.merge(parser2);
		String newFile = parser1.toXmlString();
		SqlMapper mapper = new SqlMapper(new ByteArrayInputStream(newFile.getBytes()));
		mapper.assertHasElement("test");
		mapper.assertHasElement("BaseResultMap");
	}
	
	@Test(expected = InvalidMapperException.class)
	public void selfConflictId() {
		String file1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
				"<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" + 
				"<mapper namespace=\"dao.BlogMapper\">\n" + 
				"  <resultMap id=\"BaseResultMap\" type=\"hello.world.domain.Blog\">\n" + 
				"    <!--\n" + 
				"      WARNING - @mbg.generated\n" + 
				"      This element is automatically generated by MyBatis Generator, do not modify.\n" + 
				"      This element was generated on Mon Dec 04 21:25:54 PHT 2017.\n" + 
				"    -->\n" + 
				"    <id column=\"id\" jdbcType=\"BIGINT\" property=\"id\" />\n" + 
				"    <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n" + 
				"  </resultMap>\n" + 
				"  <sql id=\"BaseResultMap\"><!-- test comment --></sql>\n" + 
				"</mapper>";
		SqlMapperParser.fromString(file1);
	}

}
