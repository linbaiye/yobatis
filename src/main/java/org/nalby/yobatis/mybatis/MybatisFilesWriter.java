package org.nalby.yobatis.mybatis;

import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

import org.mybatis.generator.api.GeneratedJavaFile;
import org.mybatis.generator.api.GeneratedXmlFile;
import org.mybatis.generator.api.LibraryRunner;
import org.mybatis.generator.exception.InvalidConfigurationException;
import org.nalby.yobatis.exception.InvalidMybatisGeneratorConfigException;
import org.nalby.yobatis.exception.ProjectException;
import org.nalby.yobatis.structure.Project;
import org.nalby.yobatis.util.Expect;
import org.nalby.yobatis.xml.SqlMapperParser;

/**
 * Write files generated by MyBatis Generator to corresponding directories.
 * @author Kyle Lin
 */
public class MybatisFilesWriter {

	private LibraryRunner runner;

	private MybatisConfigReader reader;

	private Project project;

	public MybatisFilesWriter(Project project, MybatisConfigReader configReader) {
		Expect.notNull(project, "project must not be null.");
		Expect.notNull(configReader, "configReader must not be null.");
		this.project = project;
		this.runner = new LibraryRunner();
		try {
			this.runner.parse(project.openFile(configReader.getConfigeFilename()));
		} catch (InvalidConfigurationException e) {
			throw new InvalidMybatisGeneratorConfigException(e);
		}
		if (runner.getGeneratedJavaFiles() == null) {
			throw new ProjectException("No java files generated.");
		}
		if (runner.getGeneratedXmlFiles() == null) {
			throw new ProjectException("No xml files generated.");
		}
		this.reader = configReader;
	}

	private List<GeneratedJavaFile> listFile(String suffix) {
		List<GeneratedJavaFile> result = new LinkedList<GeneratedJavaFile>();
		List<GeneratedJavaFile> javaFiles = runner.getGeneratedJavaFiles();
		for (GeneratedJavaFile file : javaFiles) {
			if (file.getFileName() != null
					&& file.getFileName().endsWith(suffix)) {
				result.add(file);
			}
		}
		return result;
	}

	private List<GeneratedJavaFile> getMapperFiles() {
		return listFile("Mapper.java");
	}
	
	private List<GeneratedJavaFile> getCriteriaFiles() {
		return listFile("Criteria.java");
	}

	public List<GeneratedJavaFile> getDomainFiles() {
		List<GeneratedJavaFile> javaFiles = runner.getGeneratedJavaFiles();
		List<GeneratedJavaFile> result = new LinkedList<GeneratedJavaFile>();
		for (GeneratedJavaFile file : javaFiles) {
			if (file.getFileName() != null &&
				(!file.getFileName().endsWith("Mapper.java") &&
				 !file.getFileName().endsWith("Criteria.java"))) {
				result.add(file);
			}
		}
		return result;
	}
	
	private List<GeneratedXmlFile> getXmlFiles() {
		return runner.getGeneratedXmlFiles();
	}
	
	private void writeJavaMappers() {
		List<GeneratedJavaFile> files = getMapperFiles();
		for (GeneratedJavaFile file : files) {
			String path = reader.getDaoDirPath() + "/" + file.getFileName();
			if (project.containsFile(path)) {
				continue;
			}
			project.writeFile(path, file.getFormattedContent());
		}
	}
	
	private void writeJavaDomains() {
		List<GeneratedJavaFile> files = getDomainFiles();
		for (GeneratedJavaFile file : files) {
			String path = reader.getDomainDirPath() + "/" + file.getFileName();
			project.writeFile(path, file.getFormattedContent());
		}
	}
	
	private void writeCriteriaFiles() {
		List<GeneratedJavaFile> files = getCriteriaFiles();
		for (GeneratedJavaFile file : files) {
			String path = reader.getCriteriaDirPath() + "/" + file.getFileName();
			System.out.println(path);
			project.writeFile(path, file.getFormattedContent());
		}
	}
	
	private String mergeManualSqlXml(String path, String content) {
		try (InputStream inputStream = project.openFile(path)) {
			SqlMapperParser oldXml = new SqlMapperParser(inputStream);
			SqlMapperParser newXml = SqlMapperParser.fromString(content);
			newXml.merge(oldXml);
			return newXml.toXmlString();
		} catch (Exception e) {
			return content;
		}
	}
	
	private void writeXmlFiles() {
		List<GeneratedXmlFile> xmlFiles = getXmlFiles();
		for (GeneratedXmlFile file : xmlFiles) {
			String path = reader.getXmlMapperDirPath() + "/" + file.getFileName();
			project.writeFile(path, mergeManualSqlXml(path, file.getFormattedContent()));
		}
	}

	public void writeAll() {
		writeCriteriaFiles();
		writeJavaDomains();
		writeJavaMappers();
		writeXmlFiles();
	}

}
